// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    /** Alternative Implementation

    // Zeroing inputs
    Mux16(a=x, b=false, sel=zx, out=zxOut);
    Mux16(a=y, b=false, sel=zy, out=zyOut);

    // Negating inputs
    Not16(in=zxOut, out=notX);
    Mux16(a=zxOut, b=notX, sel=nx, out=x1);

    Not16(in=zyOut, out=notY);
    Mux16(a=zyOut, b=notY, sel=ny, out=y1);

    // Function: Add or And
    Add16(a=x1, b=y1, out=addOut);
    And16(a=x1, b=y1, out=andOut);
    Mux16(a=andOut, b=addOut, sel=f, out=preOut);

    // Final negation
    Not16(in=preOut, out=notOut);
    Mux16(a=preOut, b=notOut, sel=no,
    out[0..7]=internalOutLow,
    out[8..14]=internalOutHigh,
    out[15]=internalOutHighest,
    out=out);

    // zr
	Or8Way(in=internalOutLow, out=low);
	Or8Way(in[0..6]=internalOutHigh, in[7]=internalOutHighest, out=high);
	Or(a=low, b=high, out=anySet);
	Not(in=anySet, out=zr);
    
    // ng: MSB of output
    And(a=internalOutHighest, b=true, out=ng);
    */


    Not(in=zx, out=nzx);
    Not(in=zy, out=nzy);

    // zx
    And16(
    a=x,
    b[0]=nzx, b[1]=nzx, b[2]=nzx, b[3]=nzx,
    b[4]=nzx, b[5]=nzx, b[6]=nzx, b[7]=nzx,
    b[8]=nzx, b[9]=nzx, b[10]=nzx, b[11]=nzx,
    b[12]=nzx, b[13]=nzx, b[14]=nzx, b[15]=nzx,
    out=x1
    );

    // nx
    Xor16(
    a=x1,
    b[0]=nx, b[1]=nx, b[2]=nx, b[3]=nx,
    b[4]=nx, b[5]=nx, b[6]=nx, b[7]=nx,
    b[8]=nx, b[9]=nx, b[10]=nx, b[11]=nx,
    b[12]=nx, b[13]=nx, b[14]=nx, b[15]=nx,
    out=x2
    );

    // zy
    And16(
    a=y,
    b[0]=nzy, b[1]=nzy, b[2]=nzy, b[3]=nzy,
    b[4]=nzy, b[5]=nzy, b[6]=nzy, b[7]=nzy,
    b[8]=nzy, b[9]=nzy, b[10]=nzy, b[11]=nzy,
    b[12]=nzy, b[13]=nzy, b[14]=nzy, b[15]=nzy,
    out=y1
    );

    // ny
    Xor16(
    a=y1,
    b[0]=ny, b[1]=ny, b[2]=ny, b[3]=ny,
    b[4]=ny, b[5]=ny, b[6]=ny, b[7]=ny,
    b[8]=ny, b[9]=ny, b[10]=ny, b[11]=ny,
    b[12]=ny, b[13]=ny, b[14]=ny, b[15]=ny,
    out=y2
    );

    // f
    Add16(a=x2, b=y2, out=xAddy);
    And16(a=x2, b=y2, out=xAndy);
    Mux16(a=xAndy, b=xAddy, sel=f, out=xy);

    // no
    Xor16(
    a=xy,
    b[0]=no, b[1]=no, b[2]=no, b[3]=no,
    b[4]=no, b[5]=no, b[6]=no, b[7]=no,
    b[8]=no, b[9]=no, b[10]=no, b[11]=no,
    b[12]=no, b[13]=no, b[14]=no, b[15]=no,
    out[0..7]=internalOutLow,
    out[8..14]=internalOutHigh,
    out[15]=internalOutHighest,
    out=out
    );

    // zr
	Or8Way(in=internalOutLow, out=low);
	Or8Way(in[0..6]=internalOutHigh, in[7]=internalOutHighest, out=high);
	Or(a=low, b=high, out=anySet);
	Not(in=anySet, out=zr);
    
    // ng: MSB of output
    And(a=internalOutHighest, b=true, out=ng);
}